pritom@pritom-VirtualBox:~/Downloads/test/viap$ ./viap_tool.py --spec=ReachSafety.prp array-examples/standard_compareModified_true-unreach-call_ground.i
Program Body
{
  int RET;
  RET = 0;
  int _1_PROVE[1000000];
  int _2_PROVE[1000000];
  int a[100000];
  int b[100000];
  int i;
  i = 0;
  int c[100000];
  int rv;
  rv = 1;
  while (i < 100000)
  {
    if (a[i] != b[i])
    {
      rv = 0;
    }

    c[i] = a[i];
    i = i + 1;
  }

  int x;
  if (rv > 0)
  {
    x = 0;
    while (x < 100000)
    {
      _1_PROVE[x] = a[x] == b[x];
      x = x + 1;
    }

  }

  x = 0;
  while (x < 100000)
  {
    _2_PROVE[x] = a[x] == c[x];
    x = x + 1;
  }

  RET = 0;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ a:array c:array b:array i:int _1_PROVE:array rv:int RET:int x:int _2_PROVE:array}



Output in normal notation:
1. Frame axioms:
a1 = a
c1 = c
b1 = b

2. Output equations:
i1 = (_N1+0)
x1 = (_N3+0)
rv1 = rv4(_N1)
d1array1(_x1,_x2) = d1array10(_x1,_x2,_N3)
main = 0

3. Other axioms:
rv4((_n1+1)) = ite((d1array4(a,(_n1+0),_n1)!=d1array4(b,(_n1+0),_n1)),0,rv4(_n1))
d1array4(_x1,_x2,(_n1+1)) = ite(((_x1=c) and (_x2=(_n1+0))),d1array4(a,(_n1+0),_n1),d1array4(_x1,_x2,_n1))
rv4(0) = 1
d1array4(_x1,_x2,0) = d1array(_x1,_x2)
(_N1>=(-(0)+100000))
(_n1<_N1) -> ((_n1+0)<100000)
d1array6(_x1,_x2,(_n2+1)) = d1array6(_x1,_x2,_n2)
d1array6(_x1,_x2,0) = d1array4(_x1,_x2,_N1)
(_N2>=(-(0)+100000))
(_n2<_N2) -> ((_n2+0)<100000)
d1array10(_x1,_x2,(_n3+1)) = d1array10(_x1,_x2,_n3)
d1array10(_x1,_x2,0) = ite((rv4(_N1)>0),d1array6(_x1,_x2,_N2),d1array4(_x1,_x2,_N1))
(_N3>=(-(0)+100000))
(_n3<_N3) -> ((_n3+0)<100000)

4. Assumption :

5. Assertion :
(rv4(_N1)>0) -> (d1array6(a,(_n2+0),_N2)==d1array6(b,(_n2+0),_N2))
(d1array10(a,(_n3+0),_N3)==d1array10(c,(_n3+0),_N3))

Axiomes Added

d1array10(a,_x2,_N3) = d1array10(a,_x2,_N3)
d1array4(a,_x2,_N1) = d1array(a,_x2)
d1array6(b,_x2,_N2) = d1array(b,_x2)
d1array6(c,(_n1+0),_N2) = d1array(a,(_n1+0))
d1array10(a,_x2,_N3) = d1array(a,_x2)
d1array4(b,_x2,_N1) = d1array(b,_x2)
d1array6(a,_x2,_N2) = d1array(a,_x2)
d1array6(c,(_n1+0),_N2) = d1array6(a,(_n1+0),_N2)
d1array4(a,_x2,_N1) = d1array4(a,_x2,_N1)
d1array10(b,_x2,_N3) = d1array(b,_x2)
d1array4(b,_x2,_N1) = d1array4(b,_x2,_N1)
d1array10(b,_x2,_N3) = d1array10(b,_x2,_N3)
d1array10(c,(_n1+0),_N3) = d1array(a,(_n1+0))
d1array10(c,(_n1+0),_N3) = d1array10(a,(_n1+0),_N3)
d1array6(b,_x2,_N2) = d1array6(b,_x2,_N2)
d1array6(a,_x2,_N2) = d1array6(a,_x2,_N2)
d1array4(c,(_n1+0),_N1) = d1array(a,(_n1+0))
d1array4(c,(_n1+0),_N1) = d1array4(a,(_n1+0),_N1)


VIAP_STANDARD_OUTPUT_True
