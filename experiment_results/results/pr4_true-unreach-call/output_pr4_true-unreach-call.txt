pritom@pritom-VirtualBox:~/Downloads/test/viap$ ./viap_tool.py --spec=ReachSafety.prp array-tiling/pr4_true-unreach-call.i
Program Body
{
  int CELLCOUNT;
  int RET;
  RET = 0;
  int _1_ASSUME;
  _1_ASSUME = 0;
  int _1_PROVE[1000000];
  CELLCOUNT = __VERIFIER_nondet_int();
  if (CELLCOUNT > 1)
  {
    int MINVAL;
    int i;
    int volArray[CELLCOUNT];
    int CCCELVOL4_var;
    CCCELVOL4_var = 5;
    int CCCELVOL3_var;
    CCCELVOL3_var = 7;
    int CCCELVOL2_var;
    CCCELVOL2_var = 3;
    int CCCELVOL1_var;
    CCCELVOL1_var = 1;
    if ((CELLCOUNT % 4) != 0)
    {
      RET = 1;
    }

    if ((CELLCOUNT % 4) == 0)
    {
      _1_ASSUME = (CELLCOUNT % 4) == 0;
      i = 1;
      while (i <= (CELLCOUNT / 4))
      {
        if (CCCELVOL4_var >= MINVAL)
        {
          volArray[(i * 4) - 4] = CCCELVOL4_var;
        }
        else
        {
          volArray[(i * 4) - 4] = 0;
        }

        if (CCCELVOL3_var >= MINVAL)
        {
          volArray[(i * 4) - 3] = CCCELVOL3_var;
        }
        else
        {
          volArray[(i * 4) - 3] = 0;
        }

        if (CCCELVOL2_var >= MINVAL)
        {
          volArray[(i * 4) - 2] = CCCELVOL2_var;
        }
        else
        {
          volArray[(i * 4) - 2] = 0;
        }

        if (CCCELVOL1_var >= MINVAL)
        {
          volArray[(i * 4) - 1] = CCCELVOL1_var;
        }
        else
        {
          volArray[(i * 4) - 1] = 0;
        }

        i = i + 1;
      }

      i = 0;
      while (i < CELLCOUNT)
      {
        _1_PROVE[i] = (volArray[i] >= MINVAL) || (volArray[i] == 0);
        i = i + 1;
      }

    }

  }

  if (((CELLCOUNT % 4) == 0) || (CELLCOUNT <= 1))
  {
    RET = 1;
  }

}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ CCCELVOL2_var:int MINVAL:int CELLCOUNT:int _1_PROVE:array CCCELVOL4_var:int RET:int i:int CCCELVOL1_var:int volArray:array CCCELVOL3_var:int _1_ASSUME:int}


Output in normal notation:
1. Frame axioms:
volArray1 = volArray
MINVAL1 = MINVAL

2. Output equations:
CCCELVOL2_var1 = ite((__VERIFIER_nondet_int2>1),3,CCCELVOL2_var)
CELLCOUNT1 = __VERIFIER_nondet_int2
d1array1(_x1,_x2) = ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%4)==0),d1array16(_x1,_x2,_N2),d1array(_x1,_x2)),d1array(_x1,_x2))
CCCELVOL4_var1 = ite((__VERIFIER_nondet_int2>1),5,CCCELVOL4_var)
main = ite((((__VERIFIER_nondet_int2%4)==0) or (__VERIFIER_nondet_int2<=1)),1,ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%4)!=0),1,0),0))
i1 = ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%4)==0),(_N2+0),i),i)
CCCELVOL1_var1 = ite((__VERIFIER_nondet_int2>1),1,CCCELVOL1_var)
CCCELVOL3_var1 = ite((__VERIFIER_nondet_int2>1),7,CCCELVOL3_var)

3. Other axioms:
d1array14(_x1,_x2,(_n1+1)) = ite((1>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-1))),1,ite((3>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-2))),3,ite((7>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-3))),7,ite((5>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),5,d1array14(_x1,_x2,_n1)),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),0,d1array14(_x1,_x2,_n1)))),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-3))),0,ite((5>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),5,d1array14(_x1,_x2,_n1)),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),0,d1array14(_x1,_x2,_n1)))))),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-2))),0,ite((7>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-3))),7,ite((5>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),5,d1array14(_x1,_x2,_n1)),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),0,d1array14(_x1,_x2,_n1)))),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-3))),0,ite((5>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),5,d1array14(_x1,_x2,_n1)),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),0,d1array14(_x1,_x2,_n1)))))))),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-1))),0,ite((3>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-2))),3,ite((7>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-3))),7,ite((5>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),5,d1array14(_x1,_x2,_n1)),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),0,d1array14(_x1,_x2,_n1)))),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-3))),0,ite((5>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),5,d1array14(_x1,_x2,_n1)),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),0,d1array14(_x1,_x2,_n1)))))),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-2))),0,ite((7>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-3))),7,ite((5>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),5,d1array14(_x1,_x2,_n1)),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),0,d1array14(_x1,_x2,_n1)))),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-3))),0,ite((5>=MINVAL),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),5,d1array14(_x1,_x2,_n1)),ite(((_x1=volArray) and (_x2=(((_n1+1)*4)-4))),0,d1array14(_x1,_x2,_n1)))))))))
d1array14(_x1,_x2,0) = d1array(_x1,_x2)
((_N1+1)>(__VERIFIER_nondet_int2/4))
(_n1<_N1) -> ((_n1+1)<=(__VERIFIER_nondet_int2/4))
d1array16(_x1,_x2,(_n2+1)) = d1array16(_x1,_x2,_n2)
d1array16(_x1,_x2,0) = d1array14(_x1,_x2,_N1)
(_N2>=(__VERIFIER_nondet_int2-0))
(_n2<_N2) -> ((_n2+0)<__VERIFIER_nondet_int2)

4. Assumption :
ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%4)==0),((__VERIFIER_nondet_int2%4)==0),0),0)

5. Assertion :
((__VERIFIER_nondet_int2%4)==0) -> ((d1array16(volArray,(_n2+0),_N2)>=MINVAL) or (d1array16(volArray,(_n2+0),_N2)==0))

Axiomes Added

d1array14(volArray,(((_n1+1)*4)-4),_N1) = ite((1>=MINVAL),1,0)
d1array16(volArray,(((_n1+1)*4)-4),_N2) = ite((1>=MINVAL),1,0)
VIAP_STANDARD_OUTPUT_True
