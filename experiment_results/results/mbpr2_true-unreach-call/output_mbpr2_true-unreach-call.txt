pritom@pritom-VirtualBox:~/Downloads/test/viap$ ./viap_tool.py --spec=ReachSafety.prp array-tiling/mbpr2_true-unreach-call.i
Program Body
{
  int CELLCOUNT;
  int RET;
  RET = 0;
  int _1_ASSUME;
  _1_ASSUME = 0;
  int _1_PROVE[1000000];
  CELLCOUNT = __VERIFIER_nondet_int();
  if (CELLCOUNT > 1)
  {
    int MINVAL;
    MINVAL = 2;
    int i;
    int volArray[CELLCOUNT];
    int CCCELVOL2_var;
    CCCELVOL2_var = 3;
    int CCCELVOL1_var;
    CCCELVOL1_var = 1;
    if ((CELLCOUNT % 2) != 0)
    {
      RET = 1;
    }

    if ((CELLCOUNT % 2) == 0)
    {
      _1_ASSUME = (CELLCOUNT % 2) == 0;
      i = 1;
      while (i <= (CELLCOUNT / 2))
      {
        if (CCCELVOL2_var >= MINVAL)
        {
          volArray[(i * 2) - 2] = CCCELVOL2_var;
        }
        else
        {
          volArray[(i * 2) - 2] = 0;
        }

        volArray[(i * 2) - 1] = volArray[(i * 2) - 1];
        i = i + 1;
      }

      i = 1;
      while (i <= (CELLCOUNT / 2))
      {
        if (CCCELVOL1_var >= MINVAL)
        {
          volArray[(i * 2) - 1] = CCCELVOL1_var;
        }
        else
        {
          volArray[(i * 2) - 1] = 0;
        }

        volArray[(i * 2) - 2] = volArray[(i * 2) - 2];
        i = i + 1;
      }

      i = 0;
      while (i < CELLCOUNT)
      {
        _1_PROVE[i] = (volArray[i] >= MINVAL) || (volArray[i] == 0);
        i = i + 1;
      }

    }

  }

  if (((CELLCOUNT % 2) == 0) || (CELLCOUNT <= 1))
  {
    RET = 1;
  }

}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ CCCELVOL2_var:int MINVAL:int CELLCOUNT:int _1_PROVE:array RET:int i:int CCCELVOL1_var:int volArray:array _1_ASSUME:int}


Output in normal notation:
1. Frame axioms:
volArray1 = volArray

2. Output equations:
CCCELVOL2_var1 = ite((__VERIFIER_nondet_int2>1),3,CCCELVOL2_var)
MINVAL1 = ite((__VERIFIER_nondet_int2>1),2,MINVAL)
CELLCOUNT1 = __VERIFIER_nondet_int2
d1array1(_x1,_x2) = ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%2)==0),d1array13(_x1,_x2,_N3),d1array(_x1,_x2)),d1array(_x1,_x2))
main = ite((((__VERIFIER_nondet_int2%2)==0) or (__VERIFIER_nondet_int2<=1)),1,ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%2)!=0),1,0),0))
i1 = ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%2)==0),(_N3+0),i),i)
CCCELVOL1_var1 = ite((__VERIFIER_nondet_int2>1),1,CCCELVOL1_var)

3. Other axioms:
d1array6(_x1,_x2,(_n1+1)) = ite(((_x1=volArray) and (_x2=(((_n1+1)*2)-1))),ite((3>=2),ite(((volArray=volArray) and ((((_n1+1)*2)-1)=(((_n1+1)*2)-2))),3,d1array6(volArray,(((_n1+1)*2)-1),_n1)),ite(((volArray=volArray) and ((((_n1+1)*2)-1)=(((_n1+1)*2)-2))),0,d1array6(volArray,(((_n1+1)*2)-1),_n1))),ite((3>=2),ite(((_x1=volArray) and (_x2=(((_n1+1)*2)-2))),3,d1array6(_x1,_x2,_n1)),ite(((_x1=volArray) and (_x2=(((_n1+1)*2)-2))),0,d1array6(_x1,_x2,_n1))))
d1array6(_x1,_x2,0) = d1array(_x1,_x2)
((_N1+1)>(__VERIFIER_nondet_int2/2))
(_n1<_N1) -> ((_n1+1)<=(__VERIFIER_nondet_int2/2))
d1array11(_x1,_x2,(_n2+1)) = ite(((_x1=volArray) and (_x2=(((_n2+1)*2)-2))),ite((1>=2),ite(((volArray=volArray) and ((((_n2+1)*2)-2)=(((_n2+1)*2)-1))),1,d1array11(volArray,(((_n2+1)*2)-2),_n2)),ite(((volArray=volArray) and ((((_n2+1)*2)-2)=(((_n2+1)*2)-1))),0,d1array11(volArray,(((_n2+1)*2)-2),_n2))),ite((1>=2),ite(((_x1=volArray) and (_x2=(((_n2+1)*2)-1))),1,d1array11(_x1,_x2,_n2)),ite(((_x1=volArray) and (_x2=(((_n2+1)*2)-1))),0,d1array11(_x1,_x2,_n2))))
d1array11(_x1,_x2,0) = d1array6(_x1,_x2,_N1)
((_N2+1)>(__VERIFIER_nondet_int2/2))
(_n2<_N2) -> ((_n2+1)<=(__VERIFIER_nondet_int2/2))
d1array13(_x1,_x2,(_n3+1)) = d1array13(_x1,_x2,_n3)
d1array13(_x1,_x2,0) = d1array11(_x1,_x2,_N2)
(_N3>=(__VERIFIER_nondet_int2-0))
(_n3<_N3) -> ((_n3+0)<__VERIFIER_nondet_int2)

4. Assumption :
ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%2)==0),((__VERIFIER_nondet_int2%2)==0),0),0)

5. Assertion :
((__VERIFIER_nondet_int2%2)==0) -> ((d1array13(volArray,(_n3+0),_N3)>=2) or (d1array13(volArray,(_n3+0),_N3)==0))

Axiomes Added

d1array6(volArray,(((_n1+1)*2)-2),_N1) = ite((3>=2),d1array(volArray,(((_n1+1)*2)-1)),d1array(volArray,(((_n1+1)*2)-1)))
d1array6(volArray,(((_n1+1)*2)-2),_N1) = ite((3>=2),d1array6(volArray,(((_n1+1)*2)-1),_N1),d1array6(volArray,(((_n1+1)*2)-1),_N1))
d1array11(volArray,(((_n2+1)*2)-1),_N2) = ite((1>=2),ite((3>=2),d1array11(volArray,(((_n2+1)*2)-2),_N2),d1array11(volArray,(((_n2+1)*2)-2),_N2)),ite((3>=2),d1array11(volArray,(((_n2+1)*2)-2),_N2),d1array11(volArray,(((_n2+1)*2)-2),_N2)))
d1array13(volArray,(((_n2+1)*2)-1),_N3) = ite((1>=2),ite((3>=2),d1array13(volArray,(((_n2+1)*2)-2),_N3),d1array13(volArray,(((_n2+1)*2)-2),_N3)),ite((3>=2),d1array13(volArray,(((_n2+1)*2)-2),_N3),d1array13(volArray,(((_n2+1)*2)-2),_N3)))
d1array11(volArray,(((_n2+1)*2)-1),_N2) = ite((1>=2),ite((3>=2),d1array(volArray,(((_n2+1)*2)-2)),d1array(volArray,(((_n2+1)*2)-2))),ite((3>=2),d1array(volArray,(((_n2+1)*2)-2)),d1array(volArray,(((_n2+1)*2)-2))))
d1array13(volArray,(((_n2+1)*2)-1),_N3) = ite((1>=2),ite((3>=2),d1array(volArray,(((_n2+1)*2)-2)),d1array(volArray,(((_n2+1)*2)-2))),ite((3>=2),d1array(volArray,(((_n2+1)*2)-2)),d1array(volArray,(((_n2+1)*2)-2))))
VIAP_STANDARD_OUTPUT_True
