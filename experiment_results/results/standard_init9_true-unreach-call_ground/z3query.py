import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
	d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
	d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
	d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
	_n6=Int('_n6')
	_n10=Int('_n10')
	d1array18=Function('d1array18',arraySort,IntSort(),IntSort(),IntSort())
	_x1=Const('_x1',arraySort)
	_x2=Int('_x2')
	_N2=Const('_N2',IntSort())
	main=Int('main')
	_N8=Const('_N8',IntSort())
	_N9=Const('_N9',IntSort())
	i1=Int('i1')
	_N3=Const('_N3',IntSort())
	d1array=Function('d1array',arraySort,IntSort(),IntSort())
	_N6=Const('_N6',IntSort())
	_N7=Const('_N7',IntSort())
	_N4=Const('_N4',IntSort())
	_N5=Const('_N5',IntSort())
	a1=Const('a1',arraySort)
	_n9=Int('_n9')
	d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
	_N1=Const('_N1',IntSort())
	d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
	d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
	x1=Int('x1')
	d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
	d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
	a=Const('a',arraySort)
	_n8=Int('_n8')
	d1array20=Function('d1array20',arraySort,IntSort(),IntSort(),IntSort())
	_n2=Int('_n2')
	_n3=Int('_n3')
	_n1=Int('_n1')
	_N10=Const('_N10',IntSort())
	_n7=Int('_n7')
	_n4=Int('_n4')
	_n5=Int('_n5')
	_k1=Int('_k1')
	_k2=Int('_k2')
	_k3=Int('_k3')
	_k4=Int('_k4')
	_k5=Int('_k5')
	_k6=Int('_k6')
	_k7=Int('_k7')
	_k8=Int('_k8')
	_k9=Int('_k9')
	_k10=Int('_k10')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(a1 == a)
	_s.add(i1 == _N9)
	_s.add(x1 == _N10)
	_s.add(main == 0)
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a,_x2) == d1array20(a,_x2,_N10))))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a,_n1,_n1 + 1) == 42)))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a,_x2,0) == d1array(a,_x2))))
	_s.add(_N1 >= 100000)
	_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
	_s.add(Or(_N1==0,_N1 - 1 < 100000))
	_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a,_n2,_n2 + 1) == 43)))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a,_x2,0) == d1array2(a,_x2,_N1))))
	_s.add(_N2 >= 100000)
	_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
	_s.add(Or(_N2==0,_N2 - 1 < 100000))
	_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a,_n3,_n3 + 1) == 44)))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(a,_x2,0) == d1array4(a,_x2,_N2))))
	_s.add(_N3 >= 100000)
	_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 100000)))
	_s.add(Or(_N3==0,_N3 - 1 < 100000))
	_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a,_n4,_n4 + 1) == 45)))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(a,_x2,0) == d1array6(a,_x2,_N3))))
	_s.add(_N4 >= 100000)
	_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < 100000)))
	_s.add(Or(_N4==0,_N4 - 1 < 100000))
	_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a,_n5,_n5 + 1) == 46)))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array10(a,_x2,0) == d1array8(a,_x2,_N4))))
	_s.add(_N5 >= 100000)
	_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 100000)))
	_s.add(Or(_N5==0,_N5 - 1 < 100000))
	_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a,_n6,_n6 + 1) == 47)))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(a,_x2,0) == d1array10(a,_x2,_N5))))
	_s.add(_N6 >= 100000)
	_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < 100000)))
	_s.add(Or(_N6==0,_N6 - 1 < 100000))
	_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a,_n7,_n7 + 1) == 48)))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array14(a,_x2,0) == d1array12(a,_x2,_N6))))
	_s.add(_N7 >= 100000)
	_s.add(ForAll([_n7],Implies(And(_n7 < _N7,_n7>=0),_f(_n7) < 100000)))
	_s.add(Or(_N7==0,_N7 - 1 < 100000))
	_s.add(ForAll([_n8],Implies(_n8>=0,d1array16(a,_n8,_n8 + 1) == 49)))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array16(a,_x2,0) == d1array14(a,_x2,_N7))))
	_s.add(_N8 >= 100000)
	_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < 100000)))
	_s.add(Or(_N8==0,_N8 - 1 < 100000))
	_s.add(ForAll([_n9],Implies(_n9>=0,d1array18(a,_n9,_n9 + 1) == 50)))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array18(a,_x2,0) == d1array16(a,_x2,_N8))))
	_s.add(_N9 >= 100000)
	_s.add(ForAll([_n9],Implies(And(_n9 < _N9,_n9>=0),_f(_n9) < 100000)))
	_s.add(Or(_N9==0,_N9 - 1 < 100000))
	_s.add(ForAll([_x2,_n10],Implies(And(_x2>=0,_n10>=0),d1array20(a,_x2,_n10 + 1) == d1array20(a,_x2,_n10))))
	_s.add(ForAll([_x2],Implies(_x2>=0,d1array20(a,_x2,0) == d1array18(a,_x2,_N9))))
	_s.add(_N10 >= 100000)
	_s.add(ForAll([_n10],Implies(And(_n10 < _N10,_n10>=0),_f(_n10) < 100000)))
	_s.add(Or(_N10==0,_N10 - 1 < 100000))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a,_n1,_N1) == 42)))
	_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a,_n2,_N2) == 43)))
	_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a,_n3,_N3) == 44)))
	_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a,_n4,_N4) == 45)))
	_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a,_n5,_N5) == 46)))
	_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a,_n6,_N6) == 47)))
	_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a,_n7,_N7) == 48)))
	_s.add(ForAll([_n8],Implies(_n8>=0,d1array16(a,_n8,_N8) == 49)))
	_s.add(ForAll([_n9],Implies(_n9>=0,d1array18(a,_n9,_N9) == 50)))
	_s.add(ForAll([_n9],Implies(_n9>=0,d1array20(a,_n9,_N10) == 50)))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a,_n1,_N1) == 42)))
	_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a,_n1,_N1) == 42)))
	_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a,_n2,_N2) == 43)))
	_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a,_n2,_N2) == 43)))
	_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a,_n3,_N3) == 44)))
	_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a,_n3,_N3) == 44)))
	_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a,_n4,_N4) == 45)))
	_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a,_n4,_N4) == 45)))
	_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a,_n5,_N5) == 46)))
	_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a,_n5,_N5) == 46)))
	_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a,_n6,_N6) == 47)))
	_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a,_n6,_N6) == 47)))
	_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a,_n7,_N7) == 48)))
	_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a,_n7,_N7) == 48)))
	_s.add(ForAll([_n8],Implies(_n8>=0,d1array16(a,_n8,_N8) == 49)))
	_s.add(ForAll([_n8],Implies(_n8>=0,d1array16(a,_n8,_N8) == 49)))
	_s.add(ForAll([_n9],Implies(_n9>=0,d1array18(a,_n9,_N9) == 50)))
	_s.add(ForAll([_n9],Implies(_n9>=0,d1array18(a,_n9,_N9) == 50)))
	_s.add(ForAll([_n9],Implies(_n9>=0,d1array20(a,_n9,_N10) == 50)))
	_s.add(ForAll([_n9],Implies(_n9>=0,d1array20(a,_n9,_N10) == 50)))
	_s.add(a1 == a)
	_s.add(_k1>=0)
	_s.add(_k2>=0)
	_s.add(_k3>=0)
	_s.add(_k4>=0)
	_s.add(_k5>=0)
	_s.add(_k6>=0)
	_s.add(_k7>=0)
	_s.add(_k8>=0)
	_s.add(_k9>=0)
	_s.add(_k10>=0)
	_s.add(_N1>=0)
	_s.add(_N2>=0)
	_s.add(_N3>=0)
	_s.add(_N4>=0)
	_s.add(_N5>=0)
	_s.add(_N6>=0)
	_s.add(_N7>=0)
	_s.add(_N8>=0)
	_s.add(_N9>=0)
	_s.add(_N10>=0)
	_s.add(Not(ForAll([_n10],Implies(And(_n10<_N10,_n10>=0),((d1array20(a,_n10,_N10))==(50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()
