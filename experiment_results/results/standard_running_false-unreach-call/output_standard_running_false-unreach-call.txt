pritom@pritom-VirtualBox:~/Downloads/test/viap$ ./viap_tool.py --spec=ReachSafety.prp array-examples/standard_running_false-unreach-call.i
Program Body
{
  int RET;
  RET = 0;
  int _1_PROVE = 0;
  int a[10];
  int b[10];
  int i;
  i = 0;
  while (i < 10)
  {
    if (a[i] >= 0)
    {
      b[i] = 1;
    }
    else
    {
      b[i] = 0;
    }

    i = i + 1;
  }

  int f;
  f = 1;
  i = 0;
  while (i < 10)
  {
    if ((a[i] >= 0) && (b[i] <= 0))
    {
      f = 0;
    }

    if ((a[i] < 0) && (b[i] <= 0))
    {
      f = 0;
    }

    i = i + 1;
  }

  _1_PROVE = f > 0;
  RET = 0;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ a:array b:array f:int i:int _1_PROVE:int RET:int}

Output in normal notation:
1. Frame axioms:
a1 = a
b1 = b

2. Output equations:
i1 = (_N2+0)
d1array1(_x1,_x2) = d1array4(_x1,_x2,_N1)
main = 0
f1 = f9(_N2)

3. Other axioms:
d1array4(_x1,_x2,(_n1+1)) = ite((d1array4(a,(_n1+0),_n1)>=0),ite(((_x1=b) and (_x2=(_n1+0))),1,d1array4(_x1,_x2,_n1)),ite(((_x1=b) and (_x2=(_n1+0))),0,d1array4(_x1,_x2,_n1)))
d1array4(_x1,_x2,0) = d1array(_x1,_x2)
(_N1>=(-(0)+10))
(_n1<_N1) -> ((_n1+0)<10)
f9((_n2+1)) = ite(((d1array4(a,(_n2+0),_N1)<0) and (d1array4(b,(_n2+0),_N1)<=0)),0,ite(((d1array4(a,(_n2+0),_N1)>=0) and (d1array4(b,(_n2+0),_N1)<=0)),0,f9(_n2)))
f9(0) = 1
(_N2>=(-(0)+10))
(_n2<_N2) -> ((_n2+0)<10)

4. Assumption :

5. Assertion :
(f9(_N2)>0)
VIAP_STANDARD_OUTPUT_False
