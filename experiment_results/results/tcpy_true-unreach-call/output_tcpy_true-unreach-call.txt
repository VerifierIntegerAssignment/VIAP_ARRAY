pritom@pritom-VirtualBox:~/Downloads/test/viap$ ./viap_tool.py --spec=ReachSafety.prp array-tiling/tcpy_true-unreach-call.i
Program Body
{
  int SIZE;
  int RET;
  RET = 0;
  int _1_ASSUME;
  _1_ASSUME = 0;
  int _1_PROVE[1000000];
  SIZE = __VERIFIER_nondet_int();
  if (SIZE > 1)
  {
    int i;
    int a[SIZE];
    int acopy[SIZE];
    if ((SIZE % 2) != 0)
    {
      RET = 1;
    }

    if ((SIZE % 2) == 0)
    {
      _1_ASSUME = (SIZE % 2) == 0;
      i = 0;
      while (i < (SIZE / 2))
      {
        acopy[(SIZE - i) - 1] = a[(SIZE - i) - 1];
        acopy[i] = a[i];
        i = i + 1;
      }

      i = 0;
      while (i < SIZE)
      {
        _1_PROVE[i] = acopy[i] == a[i];
        i = i + 1;
      }

    }

  }

  if (((SIZE % 2) == 0) || (SIZE <= 1))
  {
    RET = 1;
  }

}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ a:array acopy:array i:int _1_PROVE:array RET:int _1_ASSUME:int SIZE:int}


Output in normal notation:
1. Frame axioms:
a1 = a
acopy1 = acopy

2. Output equations:
i1 = ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%2)==0),(_N2+0),i),i)
d1array1(_x1,_x2) = ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%2)==0),d1array6(_x1,_x2,_N2),d1array(_x1,_x2)),d1array(_x1,_x2))
main = ite((((__VERIFIER_nondet_int2%2)==0) or (__VERIFIER_nondet_int2<=1)),1,ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%2)!=0),1,0),0))
SIZE1 = __VERIFIER_nondet_int2

3. Other axioms:
d1array4(_x1,_x2,(_n1+1)) = ite(((_x1=acopy) and (_x2=(_n1+0))),ite(((a=acopy) and ((_n1+0)=((__VERIFIER_nondet_int2-(_n1+0))-1))),d1array4(a,((__VERIFIER_nondet_int2-(_n1+0))-1),_n1),d1array4(a,(_n1+0),_n1)),ite(((_x1=acopy) and (_x2=((__VERIFIER_nondet_int2-(_n1+0))-1))),d1array4(a,((__VERIFIER_nondet_int2-(_n1+0))-1),_n1),d1array4(_x1,_x2,_n1)))
d1array4(_x1,_x2,0) = d1array(_x1,_x2)
(_N1>=((__VERIFIER_nondet_int2/2)-0))
(_n1<_N1) -> ((_n1+0)<(__VERIFIER_nondet_int2/2))
d1array6(_x1,_x2,(_n2+1)) = d1array6(_x1,_x2,_n2)
d1array6(_x1,_x2,0) = d1array4(_x1,_x2,_N1)
(_N2>=(__VERIFIER_nondet_int2-0))
(_n2<_N2) -> ((_n2+0)<__VERIFIER_nondet_int2)

4. Assumption :
ite((__VERIFIER_nondet_int2>1),ite(((__VERIFIER_nondet_int2%2)==0),((__VERIFIER_nondet_int2%2)==0),0),0)

5. Assertion :
((__VERIFIER_nondet_int2%2)==0) -> (d1array6(acopy,(_n2+0),_N2)==d1array6(a,(_n2+0),_N2))

Axiomes Added

d1array6(acopy,_x2,_N2) = ite((_x2=(_n1+0)),d1array(a,(_n1+0)),ite((_x2=((__VERIFIER_nondet_int2-(_n1+0))-1)),d1array(a,((__VERIFIER_nondet_int2-(_n1+0))-1)),d1array(acopy,_x2)))
d1array4(a,_x2,_N1) = d1array(a,_x2)
d1array4(a,_x2,_N1) = d1array4(a,_x2,_N1)
d1array6(a,_x2,_N2) = d1array(a,_x2)
d1array4(acopy,_x2,_N1) = ite((_x2=(_n1+0)),d1array4(a,(_n1+0),_N1),ite((_x2=((__VERIFIER_nondet_int2-(_n1+0))-1)),d1array4(a,((__VERIFIER_nondet_int2-(_n1+0))-1),_N1),d1array4(acopy,_x2,_N1)))
d1array4(acopy,_x2,_N1) = ite((_x2=(_n1+0)),d1array(a,(_n1+0)),ite((_x2=((__VERIFIER_nondet_int2-(_n1+0))-1)),d1array(a,((__VERIFIER_nondet_int2-(_n1+0))-1)),d1array(acopy,_x2)))
d1array6(a,_x2,_N2) = d1array6(a,_x2,_N2)
d1array6(acopy,_x2,_N2) = ite((_x2=(_n1+0)),d1array6(a,(_n1+0),_N2),ite((_x2=((__VERIFIER_nondet_int2-(_n1+0))-1)),d1array6(a,((__VERIFIER_nondet_int2-(_n1+0))-1),_N2),d1array6(acopy,_x2,_N2)))
VIAP_STANDARD_OUTPUT_True
