pritom@pritom-VirtualBox:~/Downloads/test/viap$ ./viap_tool.py --spec=ReachSafety.prp array-tiling/poly1_true-unreach-call.i
Program Body
{
  int SIZE;
  int RET;
  RET = 0;
  int _1_PROVE[1000000];
  SIZE = __VERIFIER_nondet_int();
  if (SIZE > 1)
  {
    long long i;
    long long a[SIZE];
    i = 0;
    while (i < SIZE)
    {
      a[i] = i * i;
      i = i + 1;
    }

    i = 0;
    while (i < SIZE)
    {
      _1_PROVE[i] = a[i] == (i * i);
      i = i + 1;
    }

  }

  RET = 1;
}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ i:long a:array _1_PROVE:array RET:int SIZE:int}


Output in normal notation:
1. Frame axioms:
a1 = a

2. Output equations:
i1 = ite((__VERIFIER_nondet_int2>1),(_N2+0),i)
d1array1(_x1,_x2) = ite((__VERIFIER_nondet_int2>1),d1array4(_x1,_x2,_N2),d1array(_x1,_x2))
main = 1
SIZE1 = __VERIFIER_nondet_int2

3. Other axioms:
d1array2(_x1,_x2,(_n1+1)) = ite(((_x1=a) and (_x2=(_n1+0))),((_n1+0)*(_n1+0)),d1array2(_x1,_x2,_n1))
d1array2(_x1,_x2,0) = d1array(_x1,_x2)
(_N1>=(__VERIFIER_nondet_int2-0))
(_n1<_N1) -> ((_n1+0)<__VERIFIER_nondet_int2)
d1array4(_x1,_x2,(_n2+1)) = d1array4(_x1,_x2,_n2)
d1array4(_x1,_x2,0) = d1array2(_x1,_x2,_N1)
(_N2>=(__VERIFIER_nondet_int2-0))
(_n2<_N2) -> ((_n2+0)<__VERIFIER_nondet_int2)

4. Assumption :

5. Assertion :
(__VERIFIER_nondet_int2>1) -> (d1array4(a,(_n2+0),_N2)==((_n2+0)*(_n2+0)))
              

Axiomes Added

d1array2(a,(_n1+0),_N1) = ((_n1+0)*(_n1+0))
d1array4(a,(_n1+0),_N2) = ((_n1+0)*(_n1+0))
VIAP_STANDARD_OUTPUT_True